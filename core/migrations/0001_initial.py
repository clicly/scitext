# Generated by Django 4.1.7 on 2023-02-20 02:41

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Environment')),
                ('capacity', models.IntegerField(verbose_name='Capacity of environment')),
                ('address', models.CharField(max_length=150, verbose_name='Address')),
                ('available', models.BooleanField(verbose_name='Available')),
                ('description', models.TextField(verbose_name='Description of environment')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Environment',
                'verbose_name_plural': 'Environments',
                'ordering': ['available', 'description'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Name of tenant')),
                ('cpf', models.CharField(max_length=11, verbose_name='Tenant CPF')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone', models.IntegerField(verbose_name='Phone number')),
                ('address', models.CharField(max_length=150, verbose_name='Tenant Address')),
                ('fee_payment', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Fee')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Tenant Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Tenant Updated')),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('cpf', models.CharField(max_length=11, verbose_name='CPF by responsable person')),
                ('fee', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Use Fee')),
                ('real_value_pay', models.DecimalField(decimal_places=2, max_digits=9)),
                ('capacity', models.IntegerField()),
                ('days', models.CharField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], max_length=1)),
                ('env', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.environment', verbose_name='Environment')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tenant', verbose_name='Tenant')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(blank=True, max_length=50, unique=True)),
                ('password', models.CharField(max_length=150)),
                ('cpf', models.CharField(max_length=11, verbose_name='CPF')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('address', models.TextField(blank=True, default='', null=True)),
                ('token', models.UUIDField(blank=True, editable=False, null=True)),
                ('cep', models.TextField(blank=True, default='', null=True)),
                ('phone', models.CharField(max_length=30)),
                ('city', models.TextField(blank=True, default='', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
